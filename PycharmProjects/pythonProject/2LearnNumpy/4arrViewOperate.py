'''
访问数组
4.1 索引访问
'''
import numpy as np

print('==================================================================== 一、 一/多维数组索引访问')
'''索引访问：
一维数组索引访问: 
    中括号+下标  arr[index]
    NumPy 一维数组索引访问与 Python 内置序列类型list索引访问一样，使用中括号+下标（[index]）。
多维数组索引访问：
    表达式1： np.array[0轴索引][1轴索引]...[n-1轴索引]
    表达式2： np.array[0轴索引, 1轴索引,...,  n-1轴索引]
'''

a1 = np.arange(1, 10)
print('a1:   ', a1)
print('a1[2]:   ', a1[2])
print('a1[-1]:   ', a1[-1])

a2 = a1.reshape((3, 3))
print('a2:')
print(a2)
print('a2[0, 0]:')  # 0行0列
print(a2[0, 0])
a2[2][1] = 100  # 2行1列
print('a2[2][1]:')
print(a2)

a2 = np.array([[1, 2, 3],
               [4, 5, 6],
               [7, 8, 9]])
print(a2[0, 2])
'''
索引访问:
    切片访问
'''
print('==================================================================== 二、单维/多维数组 切片访问')
'''
切片访问 ：
    一维数组切片访问
        NumPy 一维数组切片操作与 Python 内置序列切片操作一样。语法格式如下：
        arr[[start:end:step]]
    多维数组，切片访问语法格式如下所示
        np.array[所在0轴切片, 所在1轴切片,..., 所在n-1轴切片]
    注意：如果写成如下形式含义就不同了
        np.array[切片][切片]...[切片] # 这种形式都是对0轴的切片
'''
print('==========================================一维数组切片访问')
a1 = np.arange(0, 12)
print(a1)
print(a1[1:])
print(a1[:5])
print(a1[::2])
print('a1[-2:0:-1] :   ', a1[-2:0:-1])
print('==========================================多维数组，切片访问')
print('====a2')
a2 = a1.reshape((3, 4))
print(a2)
print(a2[:2])  # 0维(行) 取0-2行
print(a2[:2, :2])  # 0维(行) 取0-2行 ；1维(行) 取0-2列   左闭右开
print('==================================特殊切片np.array[切片][切片,切片] !!!!')
print(a2[:2][:, 2:])  # =================a2[:2]生成的结果再取[:, 2:]

'''
为了从数组中过滤我们想要的元素，可以使用布尔索引。 
注意：
 布尔数组必须与要索引的数组形状相同，否则引发IndexError错误
 布尔索引返回的新数组是原数组的副本，与原数组不共享相同的数据空间。新数组的修改不会影响原数组。这是所谓的深层复制(【深复制】！！！，占用内存空间)
'''
print('==================================================================== 三、布尔索引：深层复制')

a2 = np.array([[1, 2, 3],
               [4, 5, 6],
               [7, 8, 9]])
a3 = a2[a2 > 3]
# 布尔值来源于 a2>3
print(a3)
print(id(a3))
print(id(a2))  # 地址不一样
'''
浅复制:
共享数据，节省内存空间
'''
print('==============================================浅复制:')
# 浅复制1    ============c2 = c1  元数据共享， 实际数据也共享，c1变化c2也会跟着变化
c1 = np.arange(1, 10).reshape((3, 3))
print(c1)
c2 = c1
print(id(c1))
print(id(c2))
c2.shape = (1, 9)
print(c1.shape)
print('=======c1:')
print(c1)
# 浅复制2 元数据不共享 实际数据共享    c3 = c1[:,3:] 这里跟list列表不太一样， c1变化c2也会跟着变化
c3 = c1[:, 3:]  # 浅复制
print('======c3')
print(c3)
c3[0, 0] = 100
print(c1)
print(id(c3))
print(id(c1))

'''
花式索引 
    使用('整数列表'或'整数数组')作为数`组索引`，这称为“花式索引”。
    花式索引返回的新数组与布尔数组类似，属于【深层复制】。
'''
print(
    '==================================================================== 四、花式索引:花式索引返回的新数组与布尔数组类似，属于深层复制。')
'''
花式索引：原始数组一维数组
    原始数组是一维数组:
        索引可以是整数数组或整数列表。
        索引数组可以是一维或多维的。
    
'''
print('原始数组一维数组,索引数组可以是一维或多维的。')
print('=================================花式索引：一维数组')
a1 = np.array([1, 2, 3, 4])
a2 = np.array([1, 2])
print('原始数组是一维数组，索引数组是一维的')
# 原始数组是一维数组，索引数组是一维的
print(a1[a2])  # 取a1的指定索引（a2）的值
print()
L = [1, 1, 2, 3]
print(a1[L])
print('原始数组是一维数组，索引数组是多维的')
# 原始数组是一维数组，索引数组是多维的
a = np.array([1, 2, 3, 4, 5, 6])
j = np.array([[1, 1],
              [3, 4]])
# 输出数组形状与索引数组形状相同
print(a[j])

'''
花式索引：原始数组多维数组
    原始数组是多维数组:
        索引可以是整数数组或整数列表。
        索引数组可以是一维或多维的。

'''
print('原始数组是多维数组,索引数组可以是一维或多维的。')
print('=================================花式索引：一/二维数组')
print('----------------------1')
b = np.arange(12).reshape(3, 4)
print(b)
# 创建二维索引数组m,作为b数组的0轴索引
m = np.array([[1, 1],
              [2, 0]])
# 创建二维索引数组n,作为b数组的1轴索引
n = np.array([[1, 0],
              [3, 2]])
print(b[m, n])  # 组合相同位置的0轴索引和1轴索引，得到2行2列的结果

print('----------------------2')
a3 = np.arange(12).reshape((3, 4))
print(a3)
b1 = np.array([[1, 1], [2, 0]])
b2 = np.array([2])
print(a3[b1, b2])

print('=================================================================np.nditer(arr)===================五、迭代索引')
'''
迭代数组  
通过数组的 nditer 类可以进行迭代。 
'''
# 创建二维数组
a = np.arange(0, 12).reshape(3, 4)
print('原始数组是：')
print(a)
print('迭代输出元素：')
for n in np.nditer(a):
    print(n, end=", ")



