import random

'''
插入排序 
算法 ：
    1）首元素自然有序 (前面子序列有序的)
    2）取出下一个元素，对已排序序列，从后向前扫描 
    3）大于被取出元素者后移 
    4）小于等于被取出元素者，将被取出元素插入其后 
    5） 重复步骤2），直至处理完所有元素
特点：
    平均时间复杂度：O(n² ) 
    稳定排序 
    对数据的有序性非常敏感 
    不交换只移动，优于冒泡排序
'''


def insert_sort(alist):
    n = len(alist)

    for j in range(1, n):
        i = j  # 扣出来的，要与前面`有序子序列`进行比较的元素位置
        while i > 0:  # i从j的位置开始与前面所有元素比较，若i小则与前的的元素互换位置
            if alist[i] < alist[i - 1]:
                alist[i], alist[i - 1] = alist[i - 1], alist[i]
                i = i - 1  # 互换后i的值移到了前面一位，i要减1，继续与前面的值比较是否小于前一个元素的值，直到到第1个元素为止
            else:  # 若元素大于前一个元素，则因为前面子序列是有序的，就不用循环比较，肯定与大前面所有元素，进入下一个元素的循环
                break


if __name__ == '__main__':
    # l1 = [30,20,50,40,10]
    # l1 = [10, 20, 30, 50, 40]
    l1 = [random.randint(0, 100) for i in range(10)]
    print("排序前: ", l1)
    insert_sort(l1)
    print('排序后: ', l1)
